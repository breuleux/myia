"""Abstract Types for PyTorch Frontend."""

import torch

from ..abstract.data import AbstractClassBase
from ..utils import MyiaInputTypeError
from ..xtype import Object


class PyTorchTensor(Object):
    """Type of an AbstractArray that behaves like a PyTorch Tensor."""

    @classmethod
    def to_numpy(self, x):
        """Convert torch Tensor x to numpy."""
        if not isinstance(x, torch.Tensor):
            raise MyiaInputTypeError(f"Expected torch.Tensor but got {x}.")
        return x.detach().numpy()

    @classmethod
    def from_numpy(self, x):
        """Convert numpy array x to a torch Tensor."""
        return torch.from_numpy(x)


class AbstractModule(AbstractClassBase):
    """Represents a PyTorch Module."""

    def user_defined_version(self):
        """Return the user-defined version of this type.

        This uses the attribute types as defined by the user, rather than what
        is generated by the inferrer or other methods.

        Current default is to return self in order to make it easier for Myia
        hypermap mapping function to return a different type from its input
        (especially for pytorch modules and their contents).
        """
        return self
